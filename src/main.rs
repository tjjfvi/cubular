mod apply_move;
mod cube;
mod cube_iter;
mod display_cube;
mod flip;
mod move_piece;
mod move_value;
mod n;
mod pos;
mod root_cube;
mod rotate;
mod scramble;
mod shift;
mod slice;
mod solve;
mod swap_axes;

use std::cell::UnsafeCell;

pub(crate) use apply_move::*;
pub(crate) use cube::*;
pub(crate) use cube_iter::*;
pub(crate) use display_cube::*;
pub(crate) use flip::*;
pub(crate) use move_piece::*;
pub(crate) use move_value::*;
pub(crate) use n::*;
pub(crate) use pos::*;
pub(crate) use root_cube::*;
pub(crate) use rotate::*;
pub(crate) use scramble::*;
pub(crate) use shift::*;
pub(crate) use slice::*;
pub(crate) use solve::*;
pub(crate) use swap_axes::*;

fn main() {
  let mut cube = RootCube(UnsafeCell::new([
    [
      [N(12), N(5), N(8), N(17), N(10), N(7), N(16), N(7), N(12)],
      [N(15), N(6), N(11), N(12), N(9), N(10), N(17), N(16), N(7)],
      [N(2), N(3), N(10), N(3), N(12), N(11), N(12), N(9), N(12)],
      [N(13), N(4), N(9), N(0), N(17), N(10), N(3), N(6), N(11)],
      [N(12), N(13), N(10), N(15), N(10), N(9), N(2), N(13), N(14)],
      [N(15), N(10), N(7), N(2), N(13), N(8), N(9), N(14), N(13)],
      [N(10), N(9), N(10), N(1), N(12), N(15), N(8), N(15), N(6)],
      [N(9), N(10), N(5), N(6), N(1), N(6), N(1), N(14), N(7)],
      [N(10), N(15), N(6), N(11), N(0), N(13), N(2), N(1), N(10)],
    ],
    [
      [N(1), N(10), N(15), N(6), N(11), N(2), N(9), N(10), N(11)],
      [N(12), N(15), N(10), N(9), N(16), N(13), N(8), N(15), N(12)],
      [N(9), N(10), N(9), N(12), N(13), N(16), N(13), N(8), N(13)],
      [N(12), N(1), N(6), N(3), N(10), N(15), N(8), N(11), N(0)],
      [N(9), N(6), N(11), N(16), N(13), N(8), N(13), N(0), N(11)],
      [N(12), N(15), N(0), N(15), N(12), N(17), N(16), N(15), N(14)],
      [N(1), N(14), N(7), N(6), N(17), N(8), N(9), N(10), N(17)],
      [N(14), N(13), N(10), N(15), N(8), N(17), N(10), N(1), N(6)],
      [N(1), N(14), N(13), N(8), N(5), N(8), N(3), N(8), N(15)],
    ],
    [
      [N(14), N(11), N(10), N(7), N(6), N(5), N(2), N(11), N(16)],
      [N(13), N(6), N(9), N(12), N(11), N(16), N(11), N(12), N(9)],
      [N(16), N(15), N(16), N(9), N(10), N(9), N(0), N(13), N(0)],
      [N(5), N(6), N(13), N(12), N(11), N(12), N(11), N(10), N(11)],
      [N(10), N(7), N(10), N(5), N(14), N(13), N(14), N(13), N(14)],
      [N(15), N(0), N(15), N(12), N(17), N(16), N(15), N(14), N(9)],
      [N(0), N(7), N(10), N(15), N(2), N(5), N(8), N(11), N(8)],
      [N(11), N(6), N(17), N(10), N(1), N(8), N(17), N(2), N(13)],
      [N(8), N(9), N(16), N(1), N(4), N(7), N(12), N(13), N(12)],
    ],
    [
      [N(9), N(0), N(13), N(8), N(17), N(14), N(1), N(8), N(13)],
      [N(16), N(7), N(12), N(3), N(4), N(3), N(6), N(5), N(12)],
      [N(13), N(10), N(3), N(12), N(11), N(8), N(11), N(14), N(17)],
      [N(4), N(3), N(10), N(13), N(0), N(17), N(14), N(13), N(12)],
      [N(13), N(8), N(1), N(6), N(11), N(16), N(5), N(12), N(3)],
      [N(10), N(9), N(10), N(15), N(4), N(13), N(14), N(11), N(14)],
      [N(17), N(16), N(7), N(16), N(7), N(10), N(5), N(12), N(9)],
      [N(16), N(7), N(16), N(13), N(10), N(15), N(0), N(15), N(14)],
      [N(11), N(12), N(9), N(12), N(11), N(0), N(11), N(14), N(13)],
    ],
    [
      [N(6), N(15), N(14), N(17), N(0), N(9), N(14), N(3), N(12)],
      [N(11), N(16), N(11), N(14), N(5), N(14), N(1), N(16), N(13)],
      [N(12), N(7), N(8), N(13), N(14), N(15), N(12), N(3), N(2)],
      [N(9), N(4), N(17), N(16), N(9), N(16), N(15), N(14), N(7)],
      [N(8), N(17), N(16), N(15), N(16), N(7), N(12), N(9), N(2)],
      [N(17), N(10), N(3), N(6), N(5), N(6), N(9), N(10), N(15)],
      [N(12), N(11), N(16), N(5), N(0), N(9), N(16), N(11), N(12)],
      [N(13), N(10), N(5), N(12), N(9), N(16), N(7), N(12), N(5)],
      [N(14), N(1), N(8), N(17), N(14), N(15), N(2), N(15), N(0)],
    ],
    [
      [N(9), N(14), N(15), N(8), N(9), N(12), N(9), N(8), N(13)],
      [N(2), N(9), N(12), N(9), N(0), N(1), N(14), N(17), N(6)],
      [N(13), N(16), N(13), N(12), N(7), N(4), N(15), N(14), N(11)],
      [N(14), N(3), N(14), N(13), N(4), N(3), N(16), N(17), N(2)],
      [N(7), N(6), N(15), N(4), N(3), N(0), N(15), N(2), N(11)],
      [N(8), N(13), N(8), N(13), N(4), N(13), N(4), N(9), N(8)],
      [N(9), N(12), N(11), N(8), N(5), N(14), N(1), N(12), N(1)],
      [N(14), N(1), N(16), N(17), N(14), N(15), N(10), N(11), N(6)],
      [N(5), N(10), N(9), N(12), N(17), N(8), N(11), N(10), N(13)],
    ],
    [
      [N(8), N(15), N(8), N(15), N(12), N(15), N(8), N(11), N(8)],
      [N(11), N(14), N(13), N(14), N(9), N(12), N(11), N(6), N(9)],
      [N(10), N(3), N(14), N(9), N(10), N(5), N(8), N(9), N(16)],
      [N(15), N(12), N(17), N(12), N(15), N(10), N(15), N(2), N(17)],
      [N(6), N(1), N(10), N(13), N(4), N(7), N(4), N(17), N(10)],
      [N(15), N(12), N(3), N(10), N(11), N(14), N(17), N(12), N(13)],
      [N(10), N(7), N(12), N(5), N(10), N(17), N(6), N(11), N(4)],
      [N(7), N(0), N(7), N(8), N(15), N(6), N(15), N(4), N(15)],
      [N(10), N(17), N(14), N(13), N(2), N(7), N(14), N(1), N(0)],
    ],
    [
      [N(13), N(14), N(7), N(10), N(9), N(10), N(15), N(14), N(11)],
      [N(10), N(11), N(8), N(9), N(14), N(7), N(12), N(15), N(8)],
      [N(15), N(12), N(17), N(16), N(11), N(16), N(7), N(16), N(11)],
      [N(14), N(9), N(14), N(13), N(12), N(11), N(12), N(13), N(2)],
      [N(5), N(4), N(13), N(14), N(17), N(4), N(11), N(12), N(11)],
      [N(6), N(7), N(16), N(17), N(14), N(9), N(16), N(13), N(8)],
      [N(7), N(8), N(13), N(4), N(13), N(2), N(5), N(8), N(11)],
      [N(0), N(5), N(0), N(7), N(14), N(11), N(14), N(1), N(0)],
      [N(15), N(10), N(13), N(2), N(11), N(12), N(17), N(16), N(13)],
    ],
    [
      [N(8), N(11), N(16), N(13), N(16), N(11), N(0), N(9), N(0)],
      [N(11), N(16), N(1), N(12), N(3), N(12), N(11), N(10), N(9)],
      [N(8), N(11), N(8), N(9), N(6), N(11), N(10), N(7), N(8)],
      [N(13), N(16), N(11), N(10), N(1), N(0), N(7), N(14), N(7)],
      [N(14), N(17), N(16), N(9), N(4), N(11), N(0), N(13), N(0)],
      [N(15), N(14), N(7), N(4), N(15), N(16), N(17), N(12), N(13)],
      [N(16), N(13), N(2), N(7), N(14), N(15), N(14), N(9), N(14)],
      [N(13), N(10), N(5), N(12), N(9), N(2), N(3), N(4), N(11)],
      [N(16), N(17), N(0), N(11), N(12), N(11), N(10), N(5), N(14)],
    ],
  ]));
  cube.apply_move(Pos(1, 1, 1), Axis::Z, 1);
  cube.print();
  dbg!(cube.get(Pos(3, 0, 0)));
  cube.solve();
  cube.print();
  // for _ in 0..1000 {
  //   let mut cube = RootCube::solved();
  //   let pos = cube.random_pos();
  //   let val = cube.random_value(pos);
  //   cube.scramble(1000);
  //   // cube.print();
  //   cube.move_value(val, pos).unwrap();
  //   // cube.print();
  //   assert_eq!(cube.get(pos), val);
  // }
}
